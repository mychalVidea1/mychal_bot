require('dotenv').config();
const path = require('path');
const cron = require('node-cron');
const Canvas = require('canvas');
const crypto = require('crypto');
const { AttachmentBuilder } = require('discord.js');
Canvas.registerFont('./assets/Quicksand-Bold.ttf', { family: 'Quicksand' });
const { format } = require('date-fns');
const { utcToZonedTime } = require('date-fns-tz');
const { GoogleGenAI } = require("@google/genai");
const { Client, GatewayIntentBits, Partials, EmbedBuilder, PermissionsBitField, ActionRowBuilder, ButtonBuilder, ButtonStyle, REST, Routes, SlashCommandBuilder, PermissionFlagsBits, MessageFlags, Collection, ActivityType } = require('discord.js');
const fs = require('fs');
const axios = require('axios');
const sharp = require('sharp');
const getFrames = require('gif-frames');
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildModeration
    ],
    partials: [Partials.Channel, Partials.GuildMember, Partials.Message]
});

// ======================= NASTAVEN√ç =======================
const prefix = 'm!';
const roleId = process.env.ROLE_ID;
const geminiApiKey = process.env.GEMINI_API_KEY;
const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });
const tenorApiKey = process.env.TENOR_API_KEY;
const countingChannelId = '1007100284562055298';
const countingFilePath = './data/counting.json';
const ownerRoleId = '875091178322812988';
const activityChannelId = '875097279650992128';
const logChannelId = '1025689879973203968';
const startupChannelId = '1025689879973203968';
const aiModerationChannelIds = ['875097279650992128', '1261094481415897128', '1275999194313785415', '1322337083745898616', '1419340737048350880'];
const svatekBypassChannelId = '1414000469684129872';
const svatekAutoChannelId = '875097279650992128';
const SVATEK_COOLDOWN_MINUTES = 5;
let lastSvatekTimestamp = 0;
const MAX_WORDS_FOR_AI = 100;
const MIN_CHARS_FOR_AI = 4;
const COOLDOWN_SECONDS = 6;
const chatCooldowns = new Map();
const CHAT_COOLDOWN_SECONDS = 30; // Cooldown 15 sekund speci√°lnƒõ pro /chat
const NOTIFICATION_COOLDOWN_MINUTES = 10;
const otherBotPrefixes = ['?', '!', 'db!', 'c!', '*'];
const emojiSpamRegex = /(\u00a9|\u00ae|[\u2000-\u3300]|\ud83c[\ud000-\udfff]|\ud83d[\ud000-\udfff]|\ud83e[\ud000-\udfff]|<a?:\w+:\d+>){10,}/;
const mediaUrlRegex = /https?:\/\/(media\.tenor\.com|tenor\.com|giphy\.com|i\.imgur\.com|cdn\.discordapp\.com|media\.discordapp\.net|img\.youtube\.com)\S+/i;
const MAX_FILE_SIZE_BYTES = 8 * 1024 * 1024;
const allowedGuildId = '875027587477409862';

const activeImageModel = 'gemini-2.5-pro';
const firstFallbackImageModel = 'gemini-1.5-pro-latest';

const level3Words = [ 'nigga', 'n1gga', 'n*gga', 'niggas', 'nigger', 'n1gger', 'n*gger', 'niggers', 'niga', 'n1ga', 'nygga', 'niggar', 'negr', 'ne*r', 'n*gr', 'n3gr', 'neger', 'negri', 'negry', 'Niger', 'neg≈ô√≠k' ];
const level2Words = [ 'kret√©n', 'sraƒçka', 'p√≠ƒço', 'piƒço', 'fakin', 'p√≠ƒça', 'p√≠ƒçus', 'picus', 'zkurvysyn', 'zmrd', 'zmrde', 'dop√≠ƒçi', 'dokundy', 'kundo', 'kundy', 'ƒçur√°ku', 'curaku', 'ƒç≈Ør√°ku', 'mrdko', 'buzerant', 'buzna', 'kurva', 'kurvo', 'kurvy', 'ƒçur√°k', 'curak', '≈°ukat', 'mrdat', 'bitch', 'b*tch', 'whore', 'slut', 'faggot', 'motherfucker', 'asshole', 'assh*le', 'bastard', 'cunt', 'c*nt', 'dickhead', 'dick', 'pussy', 'fuck', 'f*ck', 'fck', 'kys', 'kill yourself', 'go kill yourself', 'zabij se', 'fuk', 'hitler' ];
const level1Words = [ 'vole', 'kokot', 'kokote'];

const level3Regex = new RegExp(`\\b(${level3Words.join('|')})\\b`, 'i');
const level2Regex = new RegExp(`\\b(${level2Words.join('|')})\\b`, 'i');
const level1Regex = new RegExp(`\\b(${level1Words.join('|')})\\b`, 'i');

const userCooldowns = new Map();
let lastLimitNotificationTimestamp = 0;

const chatHistory = new Map();
const SPAM_MESSAGE_COUNT = 5;
const SPAM_MAX_MESSAGE_LENGTH = 4;
const userMessageHistory = new Collection();
const userImagePostHistory = new Map();
const IMAGE_LIMIT = 3;
const IMAGE_LIMIT_TIMEFRAME_MS = 60 * 1000;
const MAX_CHAT_TURNS = 20;

const dataDirectory = './data';
const ratingsFilePath = `${dataDirectory}/ratings.json`;
const messageCountsFilePath = `${dataDirectory}/message_counts.json`;

if (!fs.existsSync(dataDirectory)) fs.mkdirSync(dataDirectory);
let ratings = {};
try { ratings = JSON.parse(fs.readFileSync(ratingsFilePath, 'utf8')); } catch (err) {}
let messageCounts = {};
try { messageCounts = JSON.parse(fs.readFileSync(messageCountsFilePath, 'utf8')); } catch (err) {}

const pendingSaves = new Set();
function scheduleSave(filePath, dataGetter) {
  if (pendingSaves.has(filePath)) return; // u≈æ je napl√°nov√°no
  pendingSaves.add(filePath);

  setTimeout(() => {
    pendingSaves.delete(filePath);
    try {
      const tempPath = filePath + '.tmp';
      fs.writeFileSync(tempPath, JSON.stringify(dataGetter(), null, 2));
      fs.renameSync(tempPath, filePath);
      console.log(`[SAVE] Soubor ${path.basename(filePath)} ulo≈æen.`);
    } catch (err) {
      console.error(`[SAVE] Chyba p≈ôi ukl√°d√°n√≠ ${filePath}:`, err);
    }
  }, 2000); // 2 sekundy zpo≈ædƒõn√≠ ‚Äî m≈Ø≈æe≈° klidnƒõ zv√Ω≈°it na 5000
}

function loadCountingState() {
    try {
        const data = fs.readFileSync(countingFilePath, 'utf8');
        return JSON.parse(data);
    } catch (err) {
        console.error("Chyba p≈ôi naƒç√≠t√°n√≠ stavu poƒç√≠t√°n√≠, resetuji na 0.", err);
        return { currentCount: 0, lastUser: null };
    }
}

function saveCountingState(state) {
    try {
        fs.writeFileSync(countingFilePath, JSON.stringify(state, null, 2));
    } catch (err) {
        console.error("Chyba p≈ôi ukl√°d√°n√≠ stavu poƒç√≠t√°n√≠:", err);
    }
}

let countingState = loadCountingState();

function saveRatings() {
    scheduleSave(ratingsFilePath, () => ratings);
}
function saveMessageCounts() {
    scheduleSave(messageCountsFilePath, () => messageCounts);
}

function getUserRating(userId) {
    const userData = ratings[userId];
    if (typeof userData === 'object' && userData !== null && userData.score !== undefined) {
        return userData.score;
    }
    return userData || 0.0;
}

function updateRating(user, points, reason = "") {
    const userId = user.id;
    const currentRating = getUserRating(userId);
    const newRating = Math.max(0, Math.min(10, currentRating + points));

    ratings[userId] = {
        score: newRating,
        username: user.tag 
    };

    saveRatings();
    
    console.log(`[RATING] U≈æivatel ${user.tag} (${userId}) obdr≈æel ${points} bod≈Ø. Nov√© sk√≥re: ${newRating.toFixed(2)}. ${reason}`);
    console.log("--------------------------");
}

async function updateRoleStatus(userId, guild, sourceMessage = null) { try { if (!guild.members.me.permissions.has(PermissionsBitField.Flags.ManageRoles)) return; const member = await guild.members.fetch(userId).catch(() => null); const role = guild.roles.cache.get(roleId); if (!member || !role) return; const userRating = getUserRating(userId); const hasRole = member.roles.cache.has(roleId); if (userRating > 9 && !hasRole) { await member.roles.add(role); const messageContent = `üéâ Gratulace, <@${member.id}>! Tv√© sk√≥re tƒõ katapultovalo mezi elitu a z√≠skal(a) jsi roli **${role.name}**! üöÄ`; if (sourceMessage && sourceMessage.channel && !sourceMessage.deleted) { sourceMessage.reply(messageContent).catch(() => {}); } else { const channel = await client.channels.fetch(logChannelId).catch(() => null); if (channel) channel.send(messageContent).catch(() => {}); } } else if (userRating <= 9 && hasRole) { await member.roles.remove(role); const messageContent = `üìâ Pozor, <@${member.id}>! Tv√© hodnocen√≠ kleslo a p≈ôi≈°el(a) jsi o roli **${role.name}**. Zaber!`; if (sourceMessage && sourceMessage.channel && !sourceMessage.deleted) { sourceMessage.reply(messageContent).catch(() => {}); } else { const channel = await client.channels.fetch(logChannelId).catch(() => null); if (channel) channel.send(messageContent).catch(() => {}); } } } catch (error) { console.error(`[ROLE ERROR] Chyba p≈ôi aktualizaci role pro ${userId}:`, error); console.log("--------------------------"); } }

async function applyTimeout(member, durationInMs, reason) {
    if (!member) return;
    try {
        await member.timeout(durationInMs, reason);
        console.log(`[MOD] U≈æivatel ${member.user.tag} dostal timeout na ${durationInMs / 1000}s. D≈Øvod: ${reason}`);
        console.log("--------------------------");
    } catch (error) {
        console.error(`[MOD ERROR] Nepoda≈ôilo se udƒõlit timeout u≈æivateli ${member.user.tag}:`, error.message);
        console.log("--------------------------");
    }
}

let useModel20 = true;

async function getGeminiChatResponse(text, username, context = "") {
    if (level3Regex.test(text) || level2Regex.test(text)) {
        return 'FORBIDDEN_CONTENT';
    }

    const contextBlock = context 
        ? `--- ZDE JE P≈òEDCHOZ√ç KONVERZACE PRO KONTEXT ---\n${context}\n---------------------------------------------\n` 
        : '';

    const prompt = `Jsi humorn√Ω a pomocn√Ω AI moder√°tor na discord serveru streamera / youtubera "mychalVidea" (na discordu pod nickem "@mychalvidea" - jenom takhle ≈æ√°dn√° jina forma!), hrajeme tu Fortnite (vƒõt≈°ina), CS2 (csko), Minecraft (u≈æ moc ne), *obƒças* d√°me Forzu Horizon (je≈°tƒõ zkousneme Roblox, ale Valorant a League of Legends nemame radi), kdyby se nƒõkdo ptal nebo zd√°lo se ≈æe chce poradit tak mu poraƒè, kdy≈æ ti nap√≠≈°e mychal mus√≠≈° b√Ωt up≈ô√≠mn√Ω, mychal m√° ve Fortnite support-a-creator (sac) k√≥d "mychal", lidi tƒõ naz√Ωvaj√≠ "üçÄ SAC MYCHAL üçÄ" (tvuj ofici√°ln√≠ nick) a d√°le m√°≈° p≈ôilo≈æen√Ω nick ka≈æd√©ho u≈æivatele tak si s t√≠m pohraj klidnƒõ i po≈°≈•ouchni. P≈ô√≠kazy kter√© m≈Ø≈æou ƒçlenov√© zadat, kdyby se nƒõkdo ptal: "/chat - Po≈°le zpr√°vu AI. /score - Zobraz√≠ hodnocen√≠ chov√°n√≠ (nebo hodnocen√≠ chov√°n√≠ jin√©ho u≈æivatele). /scoreboard - Uk√°≈æe ≈æeb≈ô√≠ƒçek nejl√©pe hodnocen√Ωch u≈æivatel≈Ø. /svatek - Uk√°≈æe kdo m√° dneska sv√°tek., /profil - vytvo≈ô√≠ se profilov√° kartiƒçka, kter√° shrnuje z√°kladn√≠ informace o u≈æivateli na serveru" Tv√Ωm √∫kolem je bavit se s u≈æivateli jako ƒçlovƒõk (ale ty jako bot nem≈Ø≈æe≈° hr√°t hry, nebav se p≈ô√≠li≈° o hr√°ch). ≈Ω√°dn√Ω rasizmus a nen√°vistn√Ω projev a zkus omezit vy≈°≈°√≠ toxicitu (lehƒç√≠ trash talk je povolen). Odpovƒõz na n√°sleduj√≠c√≠ zpr√°vu struƒçnƒõ, vtipnƒõ a neform√°lnƒõ. Tvoje odpovƒõƒè mus√≠ m√≠t maxim√°lnƒõ 70 slov. ${contextBlock} U≈æivatel "${username}" napsal: "${text}" Ty:`;

    const model = useModel20 ? "gemini-2.0-flash" : "gemini-2.5-flash";
    useModel20 = !useModel20;

    try {
        const response = await ai.models.generateContent({
            model,
            contents: [{ role: "user", parts: [{ text: prompt }] }]
        });
        console.log(`[AI CHAT] Model: ${model} | Od: ${username} | Napsal: "${text}"`);
        console.log("--------------------------");
        return response.text || `AI selhala. (${model})`;

    } catch (error) {
        console.error(`[AI ERROR] Chyba u ${model}:`, error.message);
        console.log("--------------------------");

        const fallbackModel = model === "gemini-2.0-flash" ? "gemini-2.5-flash" : "gemini-2.0-flash";
        try {
            const response = await ai.models.generateContent({
                model: fallbackModel,
                contents: [{ role: "user", parts: [{ text: prompt }] }]
            });
            return response.text || `AI neposlala ≈æ√°dnou odpovƒõƒè. (${fallbackModel})`;
        } catch (err) {
            if (err.status === 429) {
                return "Vyƒçerpal jsi dne≈°n√≠ free limit pro AI. Zkus to zase z√≠tra üçÄ";
            }
            return "Nƒõco se pokazilo a AI nem≈Ø≈æe odpovƒõdƒõt.";
        }
    }
}

async function analyzeText(textToAnalyze, context) {
    if (!geminiApiKey) return false;
    const modelsToTry = ['gemini-2.5-flash-lite', 'gemini-2.0-flash-lite', 'gemini-1.5-flash'];
    let lastError = null;
    const prompt = `Jsi AI moder√°tor pro neform√°ln√≠ hern√≠ Discord server. Tv√Ωm √∫kolem je odhalit zpr√°vy, kter√© jsou skuteƒçnƒõ ≈°kodliv√©. Ignoruj bƒõ≈æn√© lehƒç√≠ nad√°vky, "trash talk" a vtipy. Zas√°hni pokud zpr√°va obsahuje nen√°vistn√Ω projev, v√°≈æn√© vyhro≈æov√°n√≠, rasizmus (jak√°koliv forma nwordu) nebo c√≠lenou ≈°ikanu.\n---\nZDE JE KONTEXT P≈òEDCHOZ√ç KONVERZACE:\n${context || "≈Ω√°dn√Ω kontext nen√≠ k dispozici."}\n---\nNYN√ç POSUƒé POUZE TUTO NOVOU ZPR√ÅVU. JE TATO NOV√Å ZPR√ÅVA S OHLEDEM NA KONTEXT Z√ÅVA≈ΩN√ùM PORU≈†EN√çM PRAVIDEL?\nNov√° zpr√°va: "${textToAnalyze}"\n\nOdpovƒõz jen "ANO" nebo "NE".`;
    
    const contents = [{ role: "user", parts: [{ text: prompt }] }];
    const generationConfig = { maxOutputTokens: 15 };

    for (const model of modelsToTry) {
        try {
            const response = await ai.models.generateContent({
                model: model,
                contents: contents,
                generationConfig: generationConfig
            });
            
            console.log(`[AI MOD CHECK] Kontrola textu modelem: ${model}, Text: ${textToAnalyze}`);
            const candidateText = response.text;

            if (candidateText) {
                return candidateText.trim().toUpperCase().includes("ANO");
            }
            lastError = new Error(`Blocked by safety filter on model ${model}`);
            continue;
        } catch (error) {
            lastError = error;
            const status = error.status || (error.response ? error.response.status : null);
            if (status === 429 || status === 500 || status === 404) {
                console.warn(`[AI MOD CHECK] Model ${model} selhal se statusem ${status}. Zkou≈°√≠m dal≈°√≠...`);
                continue;
            } else { 
                break; 
            }
        }
    }
    
    const lastStatus = lastError?.status || (lastError?.response ? lastError.response.status : null);
    if (lastStatus === 429) return 'API_LIMIT';

    console.error(`[AI MOD ERROR] V≈°echny modely pro anal√Ωzu textu selhaly. Posledn√≠ chyba:`, lastError?.message);
    console.log("--------------------------");
    return false;
}

async function checkTenorGif(gifUrl) {
    if (!tenorApiKey) return 'needs_analysis';
    const match = gifUrl.match(/-(\d+)$/) || gifUrl.match(/\/(\d+)\.gif/);
    if (!match) return 'needs_analysis';
    const gifId = match[1];
    try {
        const url = `https://tenor.googleapis.com/v2/posts?ids=${gifId}&key=${tenorApiKey}&media_filter=minimal`;
        const response = await axios.get(url);
        const gifData = response.data?.results?.[0];
        if (!gifData) return 'needs_analysis';
        const rating = gifData.content_rating;
        if (rating === 'rated_r') {
            console.log(`[TENOR CHECK] Tenor API oznaƒçilo GIF ${gifId} jako nevhodn√Ω (rated_r).`);
            console.log("--------------------------");
            return 'inappropriate';
        }
        console.log(`[TENOR CHECK] Tenor API oznaƒçilo GIF ${gifId} jako bezpeƒçn√Ω (${rating}).`);
        console.log("--------------------------");
        return 'safe';
    } catch (error) {
        console.error("[TENOR ERROR] Chyba p≈ôi komunikaci s Tenor API:", error.message);
        console.log("--------------------------");
        return 'needs_analysis';
    }
}

async function analyzeImage(imageBuffer, mimeType) {
  if (!geminiApiKey) return false;

  // Krok 1: P≈ôedzpracov√°n√≠ obr√°zku
  try {
    if (typeof mimeType !== 'string' || !mimeType.startsWith('image/')) {
      console.warn(`[IMAGE ANALYZE] P≈ôeskoƒçena anal√Ωza, soubor nen√≠ obr√°zek: ${mimeType}`);
      return false;
    }

    // Pokud je GIF, vyt√°hneme prost≈ôedn√≠ sn√≠mek a p≈ôevedeme na PNG
    if (mimeType.startsWith('image/gif')) {
      console.log(`[IMAGE ANALYZE] Zpracov√°v√°m GIF...`);
      const meta = await sharp(imageBuffer, { animated: true }).metadata();
      const pages = Number(meta.pages) > 0 ? Number(meta.pages) : 1;
      const middleFrameIndex = Math.max(0, Math.min(pages - 1, Math.floor(pages / 2)));

      imageBuffer = await sharp(imageBuffer, { animated: true })
        .extractFrame(middleFrameIndex)
        .png()
        .toBuffer();

      mimeType = 'image/png';
      console.log(`[IMAGE ANALYZE] GIF p≈ôeveden na PNG (frame ${middleFrameIndex + 1}/${pages}).`);
    }

    // Jednotn√© zmen≈°en√≠ pro v≈°echny image typy (vƒç. PNG z GIFu)
    console.log(`[IMAGE ANALYZE] Mƒõn√≠m velikost obr√°zku (${mimeType})...`);
    imageBuffer = await sharp(imageBuffer)
      .resize({ width: 512, withoutEnlargement: true })
      .toBuffer();
    console.log(`[IMAGE ANALYZE] Velikost obr√°zku √∫spƒõ≈°nƒõ zmƒõnƒõna.`);
  } catch (processingError) {
    console.error("[IMAGE ANALYZE ERROR] Chyba p≈ôi P≈òEDZPRACOV√ÅN√ç obr√°zku:", processingError.message);
    console.log("--------------------------");
    return 'FILTERED';
  }

  // Krok 2: Odesl√°n√≠ do Gemini API
  const modelsToTry = [activeImageModel, firstFallbackImageModel];
  const base64Image = imageBuffer.toString('base64');
  const prompt = `Jsi AI moder√°tor pro hern√≠ Discord server. Posuƒè, jestli je tento obr√°zek skuteƒçnƒõ nevhodn√Ω pro komunitu (pornografie, gore, explicitn√≠ n√°sil√≠, nen√°vistn√© symboly, rasismus). Ignoruj hern√≠ n√°sil√≠ (st≈ô√≠len√≠ ve hr√°ch), krev ve hr√°ch, hern√≠ rozhran√≠ (UI) a bƒõ≈æn√© internetov√© memy, kter√© nejsou extr√©mn√≠. Buƒè shov√≠vav√Ω k textu na screenshotech. Odpovƒõz jen "ANO" (pokud je nevhodn√Ω) nebo "NE" (pokud je v po≈ô√°dku).`;

  const imagePart = {
    inlineData: {
      mimeType: mimeType,
      data: base64Image,
    },
  };

  const contents = [{ role: 'user', parts: [{ text: prompt }, imagePart] }];

  for (const modelName of modelsToTry) {
    try {
      console.log(`[AI IMAGE CHECK] Kontrola obr√°zku modelem: ${modelName}`);
      const response = await ai.models.generateContent({
        model: modelName,
        contents: contents,
      });

      const responseText = response?.text;
      if (!responseText) {
        console.warn(`[AI IMAGE CHECK] Model ${modelName} vr√°til pr√°zdnou odpovƒõƒè.`);
        continue;
      }

      const result = responseText.trim().toUpperCase();
      console.log(`[AI IMAGE CHECK] Model ${modelName} odpovƒõdƒõl: "${result}"`);
      console.log("--------------------------");
      return result.includes("ANO");
    } catch (error) {
      const status = error.status || (error.response ? error.response.status : null);
      console.warn(`[AI IMAGE CHECK] Model ${modelName} selhal se statusem ${status || 'N/A'}. Zpr√°va: ${error.message}`);
      console.log("--------------------------");
      if (status === 429 || status === 404 || status === 500 || status === 503) {
        continue;
      } else {
        break;
      }
    }
  }

  console.error(`[AI IMAGE CHECK] V≈°echny modely selhaly. Obr√°zek vy≈æaduje manu√°ln√≠ kontrolu.`);
  console.log("--------------------------");
  return 'FILTERED';
}


async function getNamenstagInfo() {
    try {
        const cacheBuster = Date.now();
        const czApiUrl = `https://svatkyapi.cz/api/day?_=${cacheBuster}`;
        const skApiUrl = `https://nameday.abalin.net/api/V2/today/cz?_=${cacheBuster}`;

        console.log(`[SVATEK API] Vol√°m API s cache busterem: ${cacheBuster}`);
        
        const requestHeaders = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        };

        const [czResponse, skResponse] = await Promise.all([
            axios.get(czApiUrl, { headers: requestHeaders }),
            axios.get(skApiUrl, { headers: requestHeaders })
        ]);

        const czName = czResponse.data?.name || 'Nezn√°m√Ω';
        const skName = skResponse.data?.data?.sk || 'Nezn√°my';

        console.log(`[SVATEK API] Naƒçteno: CZ=${czName}, SK=${skName}`);
        console.log("--------------------------");

        return { cz: czName, sk: skName };

    } catch (error) {
        if (error.response) {
            console.error("[SVATEK ERROR] Chyba p≈ôi vol√°n√≠ fin√°ln√≠ch API s cache busterem!");
            console.error("Status:", error.response.status, "URL:", error.config.url);
            console.error("Data:", error.response.data);
        } else {
            console.error("[SVATEK ERROR] Do≈°lo k chybƒõ p≈ôi komunikaci s fin√°ln√≠mi API:", error.message);
        }
        console.log("--------------------------");
        return null;
    }
}

async function moderateMessage(message) {
    if (!message.guild || !message.author || message.author.bot) return false;
    const member = message.member;
    if (member && member.user.id === process.env.OWNER_ID) return false; 
    if (!member || member.roles.cache.has(ownerRoleId)) return false;
    if (!aiModerationChannelIds.includes(message.channel.id)) return false;

    const cleanedContent = message.content.replace(/^> ?/gm, '').trim();

    let mediaUrl = null;
    let attachment = null;
    if (message.attachments.size > 0) {
        const firstAttachment = message.attachments.first();
        if (firstAttachment.size < MAX_FILE_SIZE_BYTES && (firstAttachment.contentType?.startsWith('image/') || firstAttachment.contentType?.startsWith('video/'))) {
            mediaUrl = firstAttachment.url;
            attachment = firstAttachment;
        }
    }
    if (!mediaUrl && message.embeds.length > 0) {
        const embed = message.embeds[0];
        if (embed.image) mediaUrl = embed.image.url;
        else if (embed.thumbnail) mediaUrl = embed.thumbnail.url;
    }
    if (!mediaUrl) {
        const match = message.content.match(mediaUrlRegex);
        if (match) mediaUrl = match[0];
    }

    if (mediaUrl) {
        const now = Date.now();
        const userHistory = userImagePostHistory.get(message.author.id) || [];
        const recentPosts = userHistory.filter(timestamp => now - timestamp < IMAGE_LIMIT_TIMEFRAME_MS);
        if (recentPosts.length >= IMAGE_LIMIT) {
            await applyTimeout(member, 60 * 1000, 'Spamov√°n√≠ obr√°zk≈Ø');
            try {
                await message.delete();
                const warningMsg = await message.channel.send(`<@${message.author.id}>, pos√≠l√°≈° obr√°zky p≈ô√≠li≈° rychle! Poƒçkej **60 sekund**.`);
                setTimeout(() => warningMsg.delete().catch(() => {}), 15000);
            } catch (err) { console.error("[MOD ERROR] Chyba p≈ôi trest√°n√≠ za spam obr√°zk≈Ø:", err); }
            userImagePostHistory.set(message.author.id, []);
            return true;
        }
        recentPosts.push(now);
        userImagePostHistory.set(message.author.id, recentPosts);
        
        const cleanMediaUrl = mediaUrl.split('?')[0];
        const isTenorGif = /https?:\/\/(media\.)?tenor\.com/.test(cleanMediaUrl);
        let tenorCheckResult = isTenorGif ? await checkTenorGif(cleanMediaUrl) : 'needs_analysis';

        if (tenorCheckResult === 'inappropriate') {
            updateRating(message.author, -1.5, `D≈Øvod: Nevhodn√Ω GIF (Tenor API)`);
            await applyTimeout(member, 60 * 1000, 'Nevhodn√Ω GIF');
            await updateRoleStatus(message.author.id, message.guild, message);
            try { await message.delete(); const warningMsg = await message.channel.send(`<@${message.author.id}>, tv≈Øj GIF nebo obr√°zek byl nevhodn√Ω. Sn√≠≈æeno hodnocen√≠ a **timeout na 60 sekund**.`); setTimeout(() => warningMsg.delete().catch(() => {}), 15000); } catch (err) {}
            return true;
        }
        
        if (tenorCheckResult === 'needs_analysis') {
            try {
                console.log(`[MODERATE MESSAGE] Pokou≈°√≠m se st√°hnout obr√°zek p≈ôes fetch: ${mediaUrl}`);
                const response = await fetch(mediaUrl);

                if (!response.ok) {
                    throw new Error(`Chyba serveru p≈ôi stahov√°n√≠: Status ${response.status}`);
                }

                const arrayBuffer = await response.arrayBuffer();
                const imageBuffer = Buffer.from(arrayBuffer);
                const mimeType = attachment ? attachment.contentType : response.headers.get('content-type');

                const imageResult = await analyzeImage(imageBuffer, mimeType);
                
                if (imageResult === true) {
                    updateRating(message.author, -1.5, `D≈Øvod: Nevhodn√Ω obr√°zek/GIF (AI)`);
                    await applyTimeout(member, 60 * 1000, 'Nevhodn√Ω obr√°zek');
                    await updateRoleStatus(message.author.id, message.guild, message);
                    try { await message.delete(); const warningMsg = await message.channel.send(`<@${message.author.id}>, tv≈Øj obr√°zek byl nevhodn√Ω. Sn√≠≈æeno hodnocen√≠ a **timeout na 60 sekund**.`); setTimeout(() => warningMsg.delete().catch(() => {}), 15000); } catch (err) {}
                    return true;
                } else if (imageResult === 'FILTERED') {
                    const logChannel = await client.channels.fetch(logChannelId).catch(() => null);
                    if (logChannel) {
                        const embed = new EmbedBuilder().setColor('#FFA500').setTitle('‚ö†Ô∏è AI Moderace Selhala - Lid√© k posouzen√≠').setDescription(`AI nedok√°zala analyzovat obr√°zek od <@${message.author.id}>.\n≈Ω√°d√°m o lidsk√Ω posudek.`).setImage(mediaUrl).addFields({ name: 'Odkaz na zpr√°vu', value: `[Klikni zde](${message.url})` }).setTimestamp();
                        const row = new ActionRowBuilder().addComponents( new ButtonBuilder().setCustomId(`approve-${message.id}-${message.author.id}`).setLabel('‚úÖ Ponechat').setStyle(ButtonStyle.Success), new ButtonBuilder().setCustomId(`punish-${message.id}-${message.author.id}`).setLabel('‚ùå Smazat a potrestat').setStyle(ButtonStyle.Danger) );
                        await logChannel.send({ embeds: [embed], components: [row] });
                    }
                }
            } catch (downloadError) {
                console.error("[MODERATE MESSAGE ERROR] Chyba p≈ôi stahov√°n√≠ obr√°zku pro anal√Ωzu (fetch):", downloadError.message);
                const logChannel = await client.channels.fetch(logChannelId).catch(() => null);
                if (logChannel) {
                    const embed = new EmbedBuilder().setColor('#FFA500').setTitle('‚ö†Ô∏è AI Moderace Selhala - Chyba Stahov√°n√≠').setDescription(`Bot nedok√°zal st√°hnout obr√°zek od <@${message.author.id}>.\n≈Ω√°d√°m o lidsk√Ω posudek.`).setImage(mediaUrl).addFields({ name: 'Odkaz na zpr√°vu', value: `[Klikni zde](${message.url})` }).setTimestamp();
                    const row = new ActionRowBuilder().addComponents( new ButtonBuilder().setCustomId(`approve-${message.id}-${message.author.id}`).setLabel('‚úÖ Ponechat').setStyle(ButtonStyle.Success), new ButtonBuilder().setCustomId(`punish-${message.id}-${message.author.id}`).setLabel('‚ùå Smazat a potrestat').setStyle(ButtonStyle.Danger) );
                    await logChannel.send({ embeds: [embed], components: [row] });
                }
            }
        }
    }

    // Anal√Ωza textu
    let textToAnalyze = cleanedContent.replace(mediaUrlRegex, '').trim();
    if (textToAnalyze.length === 0 && message.embeds.length > 0) { const embed = message.embeds[0]; if (embed.description) textToAnalyze = embed.description.replace(/^> ?/gm, '').trim(); }
    if (textToAnalyze.length === 0) return false;

    if (level3Regex.test(textToAnalyze)) {
        ratings[message.author.id] = 0.0; saveRatings();
        await applyTimeout(member, 60 * 60 * 1000, 'P≈ô√≠snƒõ zak√°zan√© slovo');
        await updateRoleStatus(message.author.id, message.guild, message);
        try { await message.delete(); const warningMsg = await message.channel.send(`U≈æivatel <@${message.author.id}> pou≈æil p≈ô√≠snƒõ zak√°zan√© slovo. Hodnocen√≠ **resetov√°no na 0** a **timeout na 1 hodinu**!`); setTimeout(() => warningMsg.delete().catch(() => {}), 20000); } catch (err) {}
        return true;
    }
    if (level2Regex.test(textToAnalyze)) {
        updateRating(message.author, -2, "D≈Øvod: Hrub√° ur√°≈æka");
        await applyTimeout(member, 5 * 60 * 1000, 'Hrub√° ur√°≈æka');
        await updateRoleStatus(message.author.id, message.guild, message);
        try { await message.delete(); const warningMsg = await message.channel.send(`<@${message.author.id}>, za toto chov√°n√≠ ti byl sn√≠≈æen rating o **2 body** a udƒõlen **timeout na 5 minut**.`); setTimeout(() => warningMsg.delete().catch(() => {}), 10000); } catch (err) {}
        return true;
    }
    if (level1Regex.test(textToAnalyze)) {
        try { await message.reply(`Slovn√≠k pros√≠m. ü§´`);} catch (err) {}
        return true;
    }
    if (emojiSpamRegex.test(textToAnalyze)) {
        try { await message.delete(); const warningMsg = await message.channel.send(`<@${message.author.id}>, tolik emoji nen√≠ nutn√Ω! üòÇ`); setTimeout(() => warningMsg.delete().catch(() => {}), 10000); } catch (err) {}
        return true;
    }

    const wordCount = textToAnalyze.split(' ').length;
    if (textToAnalyze.length >= MIN_CHARS_FOR_AI && wordCount <= MAX_WORDS_FOR_AI) {
        const now = Date.now();
        const lastCheck = userCooldowns.get(message.author.id);
        if (!lastCheck || (now - lastCheck > COOLDOWN_SECONDS * 1000)) {
            userCooldowns.set(message.author.id, now);
            
            const lastMessages = await message.channel.messages.fetch({ limit: 3, before: message.id });
            const context = lastMessages.filter(m => !m.author.bot && m.content).map(m => `${m.author.username}: ${m.content.replace(/^> ?/gm, '').trim()}`).reverse().join('\n');
            const toxicityResult = await analyzeText(textToAnalyze, context);
            
            if (toxicityResult === true) {
                updateRating(message.author, -1, `D≈Øvod: Toxick√° zpr√°va (AI)`);
                await updateRoleStatus(message.author.id, message.guild, message);
                try { await message.delete(); const warningMsg = await message.channel.send(`<@${message.author.id}>, tv√° zpr√°va byla nevhodn√°, hodnocen√≠ sn√≠≈æeno o **1 bod**.`); setTimeout(() => warningMsg.delete().catch(() => {}), 15000); } catch (err) {}
                return true;
            } else if (toxicityResult === 'API_LIMIT') {
                if (Date.now() - lastLimitNotificationTimestamp > NOTIFICATION_COOLDOWN_MINUTES * 60 * 1000) {
                    lastLimitNotificationTimestamp = Date.now();
                    try { const reply = await message.reply(`AI si dala ≈°lof√≠ka, zpr√°va nebyla ovƒõ≈ôena.`); setTimeout(() => reply.delete().catch(() => {}), 300000); } catch(err) {}
                }
            }
        }
    }
    return false;
}

async function checkRepetitiveSpam(message) {
  if (!message.guild || message.author.bot) return false;

  // --- konfigurace (m√°≈°-li glob√°lnƒõ, tohle sma≈æ) ---
  // const SPAM_MESSAGE_COUNT = 5;
  // const SPAM_MAX_MESSAGE_LENGTH = 60;
  // -------------------------------------------------

  // Udr≈æujeme historii u≈æivatele (FIFO) jen na posledn√≠ch SPAM_MESSAGE_COUNT zpr√°v
  const userHistory = userMessageHistory.get(message.author.id) || new Collection();
  userHistory.set(message.id, message);
  if (userHistory.size > SPAM_MESSAGE_COUNT) {
    // sma≈æ nejstar≈°√≠ (FIFO)
    const firstKey = userHistory.firstKey();
    if (firstKey) userHistory.delete(firstKey);
  }
  userMessageHistory.set(message.author.id, userHistory);

  if (userHistory.size < SPAM_MESSAGE_COUNT) return false;

  // Normalizace obsahu ‚Äì zjednodu≈°√≠ detekci "aaaa", "A A  A" apod.
  const norm = (s) => (s || "")
    .replace(/\s+/g, " ")
    .trim()
    .toLowerCase();

  const firstMessageContent = norm(userHistory.first().content || "");
  const isSpam = firstMessageContent.length > 0
    && firstMessageContent.length <= SPAM_MAX_MESSAGE_LENGTH
    && userHistory.every(msg => norm(msg.content || "") === firstMessageContent);

  if (!isSpam) return false;

  // P≈ôiprav zpr√°vy ke smaz√°n√≠: jen z tohoto kan√°lu, max 100, mlad≈°√≠ ne≈æ 14 dn√≠
  const FOURTEEN_DAYS = 14 * 24 * 60 * 60 * 1000;
  const now = Date.now();

  const deletable = [...userHistory.values()]
    .filter(m =>
      m.channelId === message.channelId &&
      (now - (m.createdTimestamp || now)) < FOURTEEN_DAYS
    )
    .slice(0, 100); // limit Discord API

  try {
    if (deletable.length > 0) {
      // v14 um√≠ Collection/Array<Message|Snowflake>
      await message.channel.bulkDelete(deletable);
    }

    // Timeout (mute) za spam ‚Äì 60 s
    await applyTimeout(message.member, 60 * 1000, 'Spamov√°n√≠ kr√°tk√Ωch opakuj√≠c√≠ch se zpr√°v');

    const warningMsg = await message.channel.send(
      `<@${message.author.id}>, p≈ôesta≈à spamovat! **Timeout na 60 sekund**.`
    );
    setTimeout(() => warningMsg.delete().catch(() => {}), 15_000);

  } catch (err) {
    console.error("[SPAM ERROR] Chyba p≈ôi maz√°n√≠/timeoutu:", err);
    console.log("--------------------------");
  } finally {
    // vyƒçisti historii, a≈• se to zbyteƒçnƒõ nehromad√≠
    userHistory.clear();
    userMessageHistory.set(message.author.id, userHistory);
  }

  return true;
}


client.once('clientReady', async () => {
    console.log(`[BOT STATUS] Bot je online jako ${client.user.tag}!`);
    console.log("--------------------------");
    const statuses = [
        { name: 'tvoje chov√°n√≠ üëÄ', type: ActivityType.Watching },
        { name: 'sk√≥re v s√≠ni sl√°vy!', type: ActivityType.Watching },
        { name: 'h√°dky...', type: ActivityType.Listening },
        { name: 'mychalovi videjka...', type: ActivityType.Watching },
        { name: 'p≈ô√≠kazy /chat', type: ActivityType.Listening },
        { name: 'kdo m√° ODBƒöR!', type: ActivityType.Watching },
        { name: 'zda pou≈æ√≠v√°≈° SAC MYCHAL!', type: ActivityType.Watching },
        { name: 'moder√°torskou challenge!', type: ActivityType.Playing }
    ];
    setInterval(() => {
        const status = statuses[Math.floor(Math.random() * statuses.length)];
        client.user.setActivity(status.name, { type: status.type });
    }, 60000);

    try {
        console.log('[COMMANDS] Zaƒç√≠n√°m registraci aplikaƒçn√≠ch (/) p≈ô√≠kaz≈Ø pro server.');
        console.log("--------------------------");
        const rest = new REST({ version: '10' }).setToken(process.env.BOT_TOKEN);
        const commands = [
            new SlashCommandBuilder().setName('chat').setDescription('Po≈°le zpr√°vu AI.').addStringOption(option => option.setName('zpr√°va').setDescription('Text pro AI.').setRequired(true)).setDMPermission(false),
            new SlashCommandBuilder().setName('score').setDescription('Zobraz√≠ tv√© hodnocen√≠ nebo hodnocen√≠ jin√©ho u≈æivatele.').addUserOption(option => option.setName('u≈æivatel').setDescription('U≈æivatel, jeho≈æ sk√≥re chce≈° vidƒõt.').setRequired(false)).setDMPermission(false),
            new SlashCommandBuilder().setName('scoreboard').setDescription('Zobraz√≠ s√≠≈à sl√°vy - ≈æeb≈ô√≠ƒçek v≈°ech u≈æivatel≈Ø.').setDMPermission(false),
            new SlashCommandBuilder().setName('svatek').setDescription('Zobraz√≠, kdo m√° dnes sv√°tek v ƒåesku a na Slovensku.').setDMPermission(false),
            new SlashCommandBuilder().setName('rate').setDescription('Ohodnot√≠ u≈æivatele (pouze pro majitele).').addUserOption(option => option.setName('u≈æivatel').setDescription('U≈æivatel, kter√©ho chce≈° ohodnotit.').setRequired(true)).addNumberOption(option => option.setName('hodnocen√≠').setDescription('ƒå√≠slo od 0 do 10.').setRequired(true).setMinValue(0).setMaxValue(10)).setDMPermission(false),
            new SlashCommandBuilder().setName('resetscoreboard').setDescription('Sma≈æe v≈°echna data hodnocen√≠ (pouze pro majitele).').setDMPermission(false),
            new SlashCommandBuilder().setName('list-servers').setDescription('Vyp√≠≈°e seznam server≈Ø, kde se bot nach√°z√≠ (pouze pro majitele).').setDMPermission(false),
            new SlashCommandBuilder().setName('leave-server').setDescription('P≈ôinut√≠ bota opustit server podle ID (pouze pro majitele).').addStringOption(option => option.setName('id').setDescription('ID serveru, kter√Ω m√° bot opustit.').setRequired(true)).setDMPermission(false),
            new SlashCommandBuilder().setName('profil').setDescription('Zobraz√≠ pƒõknou profilovou kartiƒçku u≈æivatele.').addUserOption(option => option.setName('u≈æivatel').setDescription('U≈æivatel, jeho≈æ profil chce≈° vidƒõt.').setRequired(false)).setDMPermission(false),
            new SlashCommandBuilder().setName('benchmark').setDescription('Spust√≠ z√°tƒõ≈æov√Ω test procesoru (pouze pro majitele).').addIntegerOption(option => option.setName('doba').setDescription('D√©lka testu v sekund√°ch (v√Ωchoz√≠: 10, max: 60).').setRequired(false)).setDMPermission(false),
        ].map(command => command.toJSON());
        const clientId = process.env.CLIENT_ID;
        const guildId = process.env.GUILD_ID;
        if (!clientId || !guildId) { throw new Error("[FATAL ERROR] CLIENT_ID nebo GUILD_ID nen√≠ nastaveno v .env souboru!"); }
        
        Routes.applicationGuildCommands(clientId, guildId), { body: [] }
        Routes.applicationCommands(clientId), { body: commands }

        console.log('[COMMANDS] √öspƒõ≈°nƒõ registrov√°ny p≈ô√≠kazy.');
        console.log("--------------------------");
    } catch (error) { console.error('[COMMANDS ERROR] Chyba p≈ôi registraci (/) p≈ô√≠kaz≈Ø:', error); console.log("--------------------------"); }
    try {
        const channel = await client.channels.fetch(startupChannelId);
        if (channel) {
            const startupEmbed = new EmbedBuilder().setColor('#00FF00').setTitle('üöÄ JSEM ZP√ÅTKY ONLINE! üöÄ').setDescription('Jsem p≈ôipraven hodnotit chov√°n√≠! üëÄ').setImage('https://tenor.com/view/robot-ai-artificial-intelligence-hello-waving-gif-14586208').setTimestamp().setFooter({ text: 'mychalVidea' });
            await channel.send({ embeds: [startupEmbed] });
        }
    } catch (error) { console.error("[STARTUP LOG ERROR] Chyba p≈ôi odes√≠l√°n√≠ startup zpr√°vy:", error); console.log("--------------------------"); }
    console.log('[SERVER CHECK] Kontroluji servery...');
    console.log("--------------------------");
    client.guilds.cache.forEach(guild => { if (guild.id !== allowedGuildId) { console.log(`[LEAVE] Opou≈°t√≠m nepovolen√Ω server: ${guild.name} (ID: ${guild.id})`); guild.leave().catch(err => console.error(`[LEAVE ERROR] Nepoda≈ôilo se opustit server ${guild.name}:`, err)); } });

    console.log('[CRON] Pl√°nuji automatickou √∫lohu pro sv√°tek...');
    console.log("--------------------------");
    
    cron.schedule('5 2 * * *', async () => {
        console.log('[CRON JOB] Spou≈°t√≠m automatickou √∫lohu pro sv√°tek...');
        try {
            if (!svatekAutoChannelId || svatekAutoChannelId === 'ZDE_VLOZ_ID_KANALU') {
                console.error('[CRON ERROR] Nen√≠ nastaven kan√°l pro automatick√© pos√≠l√°n√≠ sv√°tk≈Ø (svatekAutoChannelId). √öloha p≈ôeskoƒçena.');
                console.log("--------------------------");
                return;
            }

            const channel = await client.channels.fetch(svatekAutoChannelId);
            if (!channel) {
                console.error(`[CRON ERROR] Kan√°l pro sv√°tek s ID ${svatekAutoChannelId} nebyl nalezen.`);
                console.log("--------------------------");
                return;
            }

            const svatky = await getNamenstagInfo();
            if (!svatky) {
                console.error('[CRON ERROR] Nepoda≈ôilo se naƒç√≠st informace o sv√°tc√≠ch pro automatickou √∫lohu.');
                console.log("--------------------------");
                return;
            }

            const timeZone = 'Europe/Prague';
            const zonedDate = utcToZonedTime(new Date(), timeZone);
            const formattedDate = format(zonedDate, 'd. M. yyyy');

            const svatekEmbed = new EmbedBuilder()
                .setColor('#ED4245')
                .setTitle(`üíê Dnes je ${formattedDate} a sv√°tek slav√≠: üåπ`)
                .addFields(
                    { name: 'üá®üáø ƒåesko', value: `\`\`\`${svatky.cz}\`\`\``, inline: true },
                    { name: 'üá∏üá∞ Slovensko', value: `\`\`\`${svatky.sk}\`\`\``, inline: true }
                )
                .setFooter({
                    text: 'P≈ôejeme v≈°e nejlep≈°√≠!',
                    iconURL: client.user.displayAvatarURL()
                });

            await channel.send({ embeds: [svatekEmbed] });
            console.log(`[CRON SUCCESS] Automatick√Ω sv√°tek √∫spƒõ≈°nƒõ odesl√°n do kan√°lu ${channel.name}.`);
            console.log("--------------------------");

        } catch (err) {
            console.error('[CRON ERROR] Do≈°lo k chybƒõ p≈ôi automatick√©m pos√≠l√°n√≠ sv√°tku:', err);
            console.log("--------------------------");
        }
    }, {
        scheduled: true,
        timezone: "Europe/Prague"
    });
});

client.on('guildCreate', guild => { 
    if (guild.id !== allowedGuildId) { 
        console.log(`[JOIN/LEAVE] Byl jsem p≈ôid√°n na nepovolen√Ω server: ${guild.name} (ID: ${guild.id}). Okam≈æitƒõ ho opou≈°t√≠m.`); 
        console.log("--------------------------");
        guild.leave().catch(err => console.error(`[LEAVE ERROR] Nepoda≈ôilo se opustit novƒõ p≈ôidan√Ω server ${guild.name}:`, err)); 
    } 
});

client.on('interactionCreate', async interaction => {
    if (interaction.isButton()) {
        if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
            return interaction.reply({ content: 'K t√©to akci nem√°≈° opr√°vnƒõn√≠.', flags: MessageFlags.Ephemeral });
        }
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });
        const [action, , authorId] = interaction.customId.split('-');
        const logMessage = await interaction.channel.messages.fetch(interaction.message.id).catch(() => null);
        if (action === 'approve') {
            if (logMessage) { const embed = new EmbedBuilder(logMessage.embeds[0].data).setColor('#00FF00').setTitle('‚úÖ Obr√°zek Schv√°len').setDescription(`Obr√°zek od <@${authorId}> schv√°len moder√°torem <@${interaction.user.id}>.`).setFields([]); await logMessage.edit({ embeds: [embed], components: [] }); }
            return interaction.editReply({ content: 'Obr√°zek byl schv√°len.' });
        } else if (action === 'punish') {
            const memberToPunish = await interaction.guild.members.fetch(authorId).catch(() => null);
            updateRating(authorId, -2.5, 'D≈Øvod: Nevhodn√Ω obr√°zek (manu√°lnƒõ)');
            await applyTimeout(memberToPunish, 60 * 1000, 'Nevhodn√Ω obr√°zek (manu√°lnƒõ)');
            if (logMessage && logMessage.embeds[0]?.fields[0]) {
                const messageUrl = logMessage.embeds[0].fields[0].value;
                const urlParts = messageUrl.match(/channels\/\d+\/(\d+)\/(\d+)/);
                if (urlParts) {
                    const [, channelId, messageId] = urlParts;
                    const channel = await client.channels.fetch(channelId).catch(() => null);
                    if (channel) { const messageToDelete = await channel.messages.fetch(messageId).catch(() => null); if (messageToDelete) await messageToDelete.delete().catch(err => console.error("[MOD BUTTON ERROR] Nepoda≈ôilo se smazat zpr√°vu:", err)); }
                }
            }
            await updateRoleStatus(authorId, interaction.guild);
            if (logMessage) { const embed = new EmbedBuilder(logMessage.embeds[0].data).setColor('#FF0000').setTitle('‚ùå Obr√°zek Zam√≠tnut').setDescription(`U≈æivatel <@${authorId}> potrest√°n moder√°torem <@${interaction.user.id}>.\nHodnocen√≠ sn√≠≈æeno o **2.5**, timeout na **60 sekund**`).setFields([]); await logMessage.edit({ embeds: [embed], components: [] }); }
            return interaction.editReply({ content: `U≈æivatel byl potrest√°n.` });
        }
        return;
    }

    if (!interaction.isChatInputCommand()) return;
    const { commandName } = interaction;
    const ownerId = process.env.OWNER_ID;

    if (commandName === 'svatek') {
        const isBypassChannel = interaction.channel.id === svatekBypassChannelId;

        if (!isBypassChannel) {
            const now = Date.now();
            const cooldownMilliseconds = SVATEK_COOLDOWN_MINUTES * 60 * 1000;
            const timeSinceLastUse = now - lastSvatekTimestamp;

            if (timeSinceLastUse < cooldownMilliseconds) {
                const timeLeftSeconds = (cooldownMilliseconds - timeSinceLastUse) / 1000;
                return interaction.reply({
                    content: `Tento p≈ô√≠kaz m≈Ø≈æe b√Ωt glob√°lnƒõ pou≈æit jen jednou za ${SVATEK_COOLDOWN_MINUTES} minut. Zkus to zase za **${timeLeftSeconds.toFixed(0)} sekund**.`,
                    flags: MessageFlags.Ephemeral
                });
            }
        }

        await interaction.deferReply();
        const svatky = await getNamenstagInfo();

        if (!svatky) {
            return interaction.editReply({ content: 'Bohu≈æel se nepoda≈ôilo naƒç√≠st informace o sv√°tc√≠ch. Zkus to pros√≠m pozdƒõji.' });
        }

        const timeZone = 'Europe/Prague';
        const zonedDate = utcToZonedTime(new Date(), timeZone);
        const formattedDate = format(zonedDate, 'd. M. yyyy');

        const svatekEmbed = new EmbedBuilder()
            .setColor('#ED4245')
            .setTitle(`üíê Dnes je ${formattedDate} üåπ`)
            .addFields(
                { name: 'üá®üáø ƒåesk√° republika', value: `\`\`\`${svatky.cz}\`\`\``, inline: true },
                { name: 'üá∏üá∞ Slovensko', value: `\`\`\`${svatky.sk}\`\`\``, inline: true }
            )
            .setFooter({
                text: 'P≈ôejeme v≈°e nejlep≈°√≠!',
                iconURL: client.user.displayAvatarURL()
            });

        if (!isBypassChannel) {
            lastSvatekTimestamp = Date.now();
        }

        return interaction.editReply({ embeds: [svatekEmbed] });
    }

    if (commandName === 'benchmark') {
        if (interaction.user.id !== ownerId) {
            return interaction.reply({ content: 'Tento tajn√Ω p≈ô√≠kaz m≈Ø≈æe pou≈æ√≠t pouze m≈Øj stvo≈ôitel! ü§ñ', ephemeral: true });
        }

        const duration = interaction.options.getInteger('doba') || 10;
        if (duration > 60) {
            return interaction.reply({ content: 'Hele, klid. Maxim√°ln√≠ doba testu je 60 sekund, a≈• neupeƒçeme i p≈Ødu.', ephemeral: true });
        }

        await interaction.deferReply({ ephemeral: true });
        interaction.editReply({ content: `Rozj√≠≈æd√≠m motory! Spou≈°t√≠m z√°tƒõ≈æov√Ω test procesoru na ${duration} sekund... üî• Sleduj Spr√°vce √∫loh!` });

        setTimeout(() => {
            const startTime = Date.now();
            let operations = 0;
            console.log(`[Benchmark] Spu≈°tƒõn na ${duration} sekund.`);
            
            while (Date.now() - startTime < duration * 1000) {
                const hash = crypto.createHash('sha256');
                hash.update(Math.random().toString());
                hash.digest('hex');
                operations++;
            }
            
            const endTime = Date.now();
            const timeTaken = (endTime - startTime) / 1000;
            console.log(`[Benchmark] Dokonƒçen. Provedeno ${operations.toLocaleString('cs-CZ')} operac√≠.`);

            interaction.editReply({ content: `‚úÖ Benchmark dokonƒçen za ${timeTaken.toFixed(2)}s! Procesor provedl **${operations.toLocaleString('cs-CZ')}** hashovac√≠ch operac√≠. Ani se nezapotil!` });
        }, 100);
    }

    if (commandName === 'chat') {
        const now = Date.now();
        const userCooldown = chatCooldowns.get(interaction.user.id);
        if (userCooldown) {
            const timeLeft = (userCooldown + CHAT_COOLDOWN_SECONDS * 1000 - now) / 1000;
            if (timeLeft > 0) {
                return interaction.reply({ content: `S AI m≈Ø≈æe≈° chatovat znovu za **${timeLeft.toFixed(1)}s**.`, flags: MessageFlags.Ephemeral });
            }
        }
        chatCooldowns.set(interaction.user.id, now);
        const userMessageContent = interaction.options.getString('zpr√°va');

        const MAX_CHAT_LENGTH = 200;
        if (userMessageContent.length > MAX_CHAT_LENGTH) {
            return interaction.reply({ content: `Tvoje zpr√°va je p≈ô√≠li≈° dlouh√°! Maxim√°ln√≠ povolen√° d√©lka je **${MAX_CHAT_LENGTH} znak≈Ø**.`, flags: MessageFlags.Ephemeral });
        }

        await interaction.deferReply();
        
        const ACTIVITY_CHANNEL_ID = '875097279650992128';
        const MAX_HISTORY_MESSAGES = 40;
        
        let context = "";
        try {
            const channel = await client.channels.fetch(ACTIVITY_CHANNEL_ID);
            if (channel) {
                const messages = await channel.messages.fetch({ limit: MAX_HISTORY_MESSAGES });

                const structuredHistory = [];
                
                for (const message of messages.values()) {
                    const timestamp = format(message.createdAt, 'HH:mm:ss');
                    const cleanedContent = message.content.replace(/^> ?/gm, '').trim();

                    if (message.author.bot) continue; 
                    if (cleanedContent.startsWith(prefix) || otherBotPrefixes.some(p => cleanedContent.startsWith(p))) continue;

                    const contentToLog = cleanedContent.length > 50 ? cleanedContent.substring(0, 50) + '...' : cleanedContent;
                    const historyEntry = `[${timestamp}] ${message.author.username} napsal: "${contentToLog}"`;
                    
                    structuredHistory.unshift(historyEntry);
                }
                
                const queryTimestamp = format(new Date(), 'HH:mm:ss');
                const userQueryEntry = `[${queryTimestamp}] ${interaction.user.username} se zeptal(/chat): "${userMessageContent}"`; 

                structuredHistory.unshift(userQueryEntry);

                context = "--- ZDE JE KONTEXT Z POSLEDN√çCH ZPR√ÅV V KAN√ÅLU #activity ---\n" + structuredHistory.join('\n') + "\n----------------------------------------------------------------------\n";
            }
        } catch (e) {
            console.error("[CHAT CONTEXT FETCH ERROR]", e);
        }
        
        const currentChatHistory = chatHistory.get(interaction.user.id) || [];
        const historyForAI = currentChatHistory.map(turn => ({ role: turn.role, parts: [{ text: turn.content }] }));

        const prompt = `Jsi humorn√Ω a pomocn√Ω AI moder√°tor na discord serveru streamera / youtubera "mychalVidea" (na discordu pod nickem "@mychalvidea" - jenom takhle ≈æ√°dn√° jina forma!), hrajeme tu Fortnite (vƒõt≈°ina), CS2 (csko), Minecraft (u≈æ moc ne), *obƒças* d√°me Forzu Horizon (je≈°tƒõ zkousneme Roblox, ale Valorant a League of Legends nemame radi), kdyby se nƒõkdo ptal nebo zd√°lo se ≈æe chce poradit tak mu poraƒè, kdy≈æ ti nap√≠≈°e mychal mus√≠≈° b√Ωt up≈ô√≠mn√Ω, mychal m√° ve Fortnite support-a-creator (sac) k√≥d "mychal", lidi tƒõ naz√Ωvaj√≠ "üçÄ SAC MYCHAL üçÄ" (tvuj ofici√°ln√≠ nick) a d√°le m√°≈° p≈ôilo≈æen√Ω nick ka≈æd√©ho u≈æivatele tak si s t√≠m pohraj klidnƒõ i po≈°≈•ouchni. P≈ô√≠kazy kter√© m≈Ø≈æou ƒçlenov√© zadat, kdyby se nƒõkdo ptal: "/chat - Po≈°le zpr√°vu AI. /score - Zobraz√≠ hodnocen√≠ chov√°n√≠ (nebo hodnocen√≠ chov√°n√≠ jin√©ho u≈æivatele). /scoreboard - Uk√°≈æe ≈æeb≈ô√≠ƒçek nejl√©pe hodnocen√Ωch u≈æivatel≈Ø. /svatek - Uk√°≈æe kdo m√° dneska sv√°tek., /profil - vytvo≈ô√≠ se profilov√° kartiƒçka, kter√° shrnuje z√°kladn√≠ informace o u≈æivateli na serveru" Tv√Ωm √∫kolem je bavit se s u≈æivateli jako ƒçlovƒõk (ale ty jako bot nem≈Ø≈æe≈° hr√°t hry, nebav se p≈ô√≠li≈° o hr√°ch). ≈Ω√°dn√Ω rasizmus a nen√°vistn√Ω projev a zkus omezit vy≈°≈°√≠ toxicitu (lehƒç√≠ trash talk je povolen). Odpovƒõz na n√°sleduj√≠c√≠ zpr√°vu struƒçnƒõ, vtipnƒõ a neform√°lnƒõ. Tvoje odpovƒõƒè mus√≠ m√≠t maxim√°lnƒõ 70 slov. ${context} U≈æivatel "${interaction.user.username}" napsal: "${userMessageContent}" Ty:`;

        const model = useModel20 ? "gemini-2.0-flash" : "gemini-2.5-flash";
        useModel20 = !useModel20;

        try {
            const response = await ai.models.generateContent({
                model,
                contents: [...historyForAI, { role: "user", parts: [{ text: prompt }] }]
            });
            
            const aiResponseText = response.text || `AI selhala. (${model})`;
            
            const newTurn = { role: 'user', content: userMessageContent };
            const aiTurn = { role: 'model', content: aiResponseText };
            
            let newHistory = [...currentChatHistory, newTurn, aiTurn];
            
            if (newHistory.length > MAX_CHAT_TURNS * 2) {
                newHistory = newHistory.slice(newHistory.length - MAX_CHAT_TURNS * 2);
            }
            
            chatHistory.set(interaction.user.id, newHistory);
            
            console.log(`[AI CHAT] Model: ${model} | Od: ${interaction.user.username} | Napsal: "${userMessageContent}"`);
            console.log("--------------------------");

            const embed = new EmbedBuilder().setColor('#5865F2').setAuthor({ name: interaction.user.username, iconURL: interaction.user.displayAvatarURL() }).setDescription(userMessageContent);
            await interaction.editReply({ embeds: [embed] });
            
            await interaction.followUp({ content: aiResponseText }); 
        } catch (error) {
            console.error(`[AI ERROR] Chyba u ${model}:`, error.message);
            console.log("--------------------------");

            const fallbackModel = model === "gemini-2.0-flash" ? "gemini-2.5-flash" : "gemini-2.0-flash";
            try {
                const response = await ai.models.generateContent({
                    model: fallbackModel,
                    contents: [...historyForAI, { role: "user", parts: [{ text: prompt }] }]
                });
                const aiResponseText = response.text || `AI neposlala ≈æ√°dnou odpovƒõƒè. (${fallbackModel})`;

                const newTurn = { role: 'user', content: userMessageContent };
                const aiTurn = { role: 'model', content: aiResponseText };
                
                let newHistory = [...currentChatHistory, newTurn, aiTurn];
                
                if (newHistory.length > MAX_CHAT_TURNS * 2) {
                    newHistory = newHistory.slice(newHistory.length - MAX_CHAT_TURNS * 2);
                }
                
                chatHistory.set(interaction.user.id, newHistory);

                const embed = new EmbedBuilder().setColor('#5865F2').setAuthor({ name: interaction.user.username, iconURL: interaction.user.displayAvatarURL() }).setDescription(userMessageContent);
                await interaction.editReply({ embeds: [embed] });
                await interaction.followUp({ content: aiResponseText });

            } catch (err) {
                if (err.status === 429) {
                    const embed = new EmbedBuilder().setColor('#5865F2').setAuthor({ name: interaction.user.username, iconURL: interaction.user.displayAvatarURL() }).setDescription(userMessageContent);
                    await interaction.editReply({ embeds: [embed] });
                    return interaction.followUp("Vyƒçerpal jsi dne≈°n√≠ free limit pro AI. Zkus to zase z√≠tra üçÄ");
                }
                const embed = new EmbedBuilder().setColor('#5865F2').setAuthor({ name: interaction.user.username, iconURL: interaction.user.displayAvatarURL() }).setDescription(userMessageContent);
                await interaction.editReply({ embeds: [embed] });
                return interaction.followUp("Nƒõco se pokazilo a AI nem≈Ø≈æe odpovƒõdƒõt.");
            }
        }
    }
    
    if (commandName === 'list-servers' || commandName === 'leave-server') {
        if (interaction.user.id !== ownerId) { return interaction.reply({ content: 'Tento p≈ô√≠kaz m≈Ø≈æe pou≈æ√≠t pouze majitel bota.', flags: MessageFlags.Ephemeral }); }
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });
        if (commandName === 'list-servers') { const guilds = client.guilds.cache.map(guild => `${guild.name} (ID: ${guild.id})`).join('\n'); const content = `Bot je na ${client.guilds.cache.size} serverech:\n\n${guilds}`; if (content.length > 2000) { const buffer = Buffer.from(content, 'utf-8'); return interaction.editReply({ files: [{ attachment: buffer, name: 'server-list.txt' }] }); } return interaction.editReply({ content }); }
        if (commandName === 'leave-server') { const guildId = interaction.options.getString('id'); const guild = client.guilds.cache.get(guildId); if (!guild) { return interaction.editReply({ content: `Chyba: Bot nen√≠ na serveru s ID \`${guildId}\`.` }); } try { await guild.leave(); return interaction.editReply({ content: `‚úÖ √öspƒõ≈°nƒõ jsem opustil server **${guild.name}**.` }); } catch (err) { return interaction.editReply({ content: `‚ùå Nepoda≈ôilo se opustit server. D≈Øvod: ${err.message}` }); } }
    }

    if (commandName === 'resetscoreboard') {
        if (!interaction.member.roles.cache.has(ownerRoleId)) { return interaction.reply({ content: 'K tomuto p≈ô√≠kazu m√° p≈ô√≠stup pouze majitel serveru.', flags: MessageFlags.Ephemeral }); }
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });
        ratings = {};
        messageCounts = {};
        chatHistory.clear();
        saveRatings();
        saveMessageCounts();
        console.log("[SCOREBOARD] Data hodnocen√≠ a zpr√°v byla smaz√°na majitelem.");
        console.log("--------------------------");
        return interaction.editReply({ content: '‚úÖ Data hodnocen√≠, poƒçtu zpr√°v a historie chatu byla smaz√°na.' });
    }

    if (commandName === 'score') {
        const targetUser = interaction.options.getUser('u≈æivatel') || interaction.user;
        const isSelfCheck = targetUser.id === interaction.user.id;
        await interaction.deferReply({ ephemeral: isSelfCheck });
        const userRating = getUserRating(targetUser.id);
        const scoreMsg = isSelfCheck ? `üåü Tv√© hodnocen√≠ je: **\`${userRating.toFixed(2)} / 10\`**` : `üåü Hodnocen√≠ <@${targetUser.id}> je: **\`${userRating.toFixed(2)} / 10\`**`;
        await interaction.editReply({ content: scoreMsg });
    }
    if (commandName === 'scoreboard') {
    await interaction.deferReply();

    const allUserIds = Object.keys(ratings);
    if (allUserIds.length === 0) {
        return interaction.editReply({ content: 'S√≠≈à sl√°vy je pr√°zdn√°!' });
    }

    // Krok 1: Vytvo≈ô√≠me seznam pouze pro ƒçleny, kte≈ô√≠ jsou na serveru
    const membersWithScores = [];
    for (const userId of allUserIds) {
        // Zkus√≠me naj√≠t ƒçlena na serveru (bezpeƒçnƒõ, s odchycen√≠m chyby)
        const member = await interaction.guild.members.fetch(userId).catch(() => null);
        if (member) {
            // Pokud ƒçlen existuje, p≈ôid√°me ho do seznamu pro se≈ôazen√≠
            membersWithScores.push({
                id: userId,
                score: getUserRating(userId),
                member: member // Ulo≈æ√≠me si cel√Ω objekt ƒçlena pro pozdƒõj≈°√≠ pou≈æit√≠
            });
        }
    }

    if (membersWithScores.length === 0) {
        return interaction.editReply({ content: 'V s√≠ni sl√°vy nejsou ≈æ√°dn√≠ aktu√°ln√≠ ƒçlenov√© serveru.' });
    }

    // Krok 2: Se≈ôad√≠me POUZE aktivn√≠ ƒçleny podle jejich sk√≥re
    membersWithScores.sort((a, b) => b.score - a.score);

    // Krok 3: Vezmeme prvn√≠ch 10 a sestav√≠me z nich ≈æeb≈ô√≠ƒçek
    const top10 = membersWithScores.slice(0, 10);

    const scoreEmbed = new EmbedBuilder()
        .setColor('#5865F2')
        .setTitle('‚ú®üèÜ S√ç≈á SL√ÅVY üèÜ‚ú®')
        .setDescription('Udr≈æuj si sk√≥re nad **9.0** a z√≠sk√°≈° p≈ô√≠stup do üëë | VIP kan√°lu!\n\n')
        .setTimestamp()
        .setFooter({ text: 'Tvoje chov√°n√≠ ovliv≈àuje tv√© sk√≥re.' });

    let leaderboardString = '';
        for (let i = 0; i < top10.length; i++) {
            const user = top10[i];
            const rank = i + 1;
            
            let rankDisplay = `**${rank}.**`;
            if (rank === 1) rankDisplay = 'ü•á';
            else if (rank === 2) rankDisplay = 'ü•à';
            else if (rank === 3) rankDisplay = 'ü•â';
            
            // Zkontrolujeme, zda m√° ƒçlen VIP roli
            const hasRole = user.member.roles.cache.has(roleId);
            const roleIndicator = hasRole ? ' üëë' : '';
            
            leaderboardString += `${rankDisplay} <@${user.id}> ‚Æû \` ${user.score.toFixed(2)} / 10 \` ${roleIndicator}\n`;
        }
    
        if (leaderboardString === '') {
            // Toto by se u≈æ nemƒõlo st√°t, ale pro jistotu
            return interaction.editReply({ content: 'V s√≠ni sl√°vy zat√≠m nikdo nen√≠.' });
        }
    
        scoreEmbed.setDescription(scoreEmbed.data.description + leaderboardString);
        await interaction.editReply({ embeds: [scoreEmbed] });
    }

    if (commandName === 'rate') {
        if (!interaction.member.roles.cache.has(ownerRoleId)) { return interaction.reply({ content: 'K tomuto p≈ô√≠kazu m√° p≈ô√≠stup pouze majitel serveru.', flags: MessageFlags.Ephemeral }); }
        await interaction.deferReply();
        const user = interaction.options.getUser('u≈æivatel');
        const ratingInput = interaction.options.getNumber('hodnocen√≠');
        if (user.id === interaction.user.id) { return interaction.editReply({ content: 'Sna≈æ√≠≈° se ohodnotit s√°m sebe? Hezk√Ω pokus. üòÇ'}); }
        if (user.bot) { return interaction.editReply({ content: 'Boti se nehodnot√≠.'}); }
        const currentRating = getUserRating(user.id);
        let newRating = (currentRating + ratingInput) / 2;
        newRating = Math.max(0, Math.min(10, newRating));
        ratings[user.id] = newRating;
        saveRatings();
        console.log(`[ADMIN RATE] U≈æivatel ${user.tag} (${user.id}) byl ohodnocen adminem ${interaction.user.tag}. Nov√© sk√≥re: ${newRating}.`);
        console.log("--------------------------");
        await updateRoleStatus(user.id, interaction.guild);
        await interaction.editReply({ content: `**<@${user.id}>** obdr≈æel(a) nov√© hodnocen√≠! üî• Nov√© sk√≥re: **\`${newRating.toFixed(2)} / 10\`**` });
    }

    if (commandName === 'profil') {
        try {
            console.log(`[COMMAND] P≈ô√≠kaz /profil pou≈æit u≈æivatelem: ${interaction.user.tag}`);
            console.log("--------------------------");
        
            await interaction.deferReply();
        
            const targetUser = interaction.options.getUser('u≈æivatel') || interaction.user;
            const member = await interaction.guild.members.fetch(targetUser.id).catch(() => null); // P≈ôid√°n .catch pro jistotu
        
            if (!member) {
                return interaction.editReply({ content: 'U≈æivatel nebyl na tomto serveru nalezen.', ephemeral: true });
            }
        
            const canvas = Canvas.createCanvas(800, 400);
            const ctx = canvas.getContext('2d');
        
            const background = await Canvas.loadImage('./assets/background.png');
            ctx.drawImage(background, 0, 0, canvas.width, canvas.height);

            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
        
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';
            ctx.lineWidth = 4;
            ctx.strokeRect(0, 0, canvas.width, canvas.height);
        
            ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
            ctx.shadowBlur = 15;
            ctx.shadowOffsetX = 5;
            ctx.shadowOffsetY = 5;
        
            ctx.beginPath();
            ctx.arc(125, 125, 80, 0, Math.PI * 2, true);
            ctx.closePath();
            ctx.fillStyle = '#000';
            ctx.fill();
        
            ctx.shadowColor = 'transparent';
            ctx.shadowBlur = 0;
            ctx.shadowOffsetX = 0;
            ctx.shadowOffsetY = 0;
        
            ctx.save();
            ctx.clip();
            const avatar = await Canvas.loadImage(member.displayAvatarURL({ extension: 'png', size: 256 }));
            ctx.drawImage(avatar, 45, 45, 160, 160);
            ctx.restore();
        
            ctx.strokeStyle = '#5865F2';
            ctx.lineWidth = 6;
            ctx.stroke();
        
            ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';
            ctx.shadowBlur = 5;
            ctx.shadowOffsetX = 2;
            ctx.shadowOffsetY = 2;
        
            let mainText = member.nickname || member.user.username;

            ctx.font = '48px "Quicksand"';
            ctx.fillStyle = '#ffffff';
            ctx.fillText(mainText, 240, 90);
        
            ctx.font = '22px "Quicksand"';
            const joinDate = member.joinedAt.toLocaleDateString('cs-CZ', { day: 'numeric', month: 'long', year: 'numeric' });
            ctx.fillText(`Na serveru od: ${joinDate}`, 240, 145); 

            const userRating = getUserRating(member.id);
            ctx.fillText(`Sk√≥re chov√°n√≠: ${userRating.toFixed(2)} / 10`, 240, 175); 

            // === OPRAVEN√Å A ZRYCHLEN√Å ƒå√ÅST PRO ZJI≈†TƒöN√ç POZICE ===
            const userIds = Object.keys(ratings);
            // NEN√ç T≈òEBA NIC STAHOVAT! Jen se≈ôad√≠me ID podle sk√≥re.
            userIds.sort((a, b) => getUserRating(b) - getUserRating(a));

            const targetUserId = member.id;
            let scoreboardRank = userIds.findIndex(id => id === targetUserId);

            let rankDisplay;
            if (scoreboardRank === -1) {
                rankDisplay = "Nen√≠ v ≈æeb≈ô√≠ƒçku";
            } else {
                const rankNumber = scoreboardRank + 1;
                rankDisplay = rankNumber === 1 ? 'ü•á 1.' : rankNumber === 2 ? 'ü•à 2.' : rankNumber === 3 ? 'ü•â 3.' : `#${rankNumber}.`;
            }
            // =====================================================

            ctx.fillText(`Pozice v ≈æeb≈ô√≠ƒçku: ${rankDisplay}`, 240, 205);

            ctx.shadowColor = 'transparent';
        
            ctx.font = '24px "Quicksand"';
            ctx.fillStyle = '#ffffff';
            ctx.fillText('Role:', 240, 245);

            const rolesStartX = 240;
            const rolesStartY = 280;
            const padding = 10;
            const lineHeight = 45;
            const rightMargin = 20;
            const maxRolesToShow = 6;

            let currentX = rolesStartX;
            let currentY = rolesStartY;
        
            const roles = member.roles.cache
                .filter(role => role.name !== '@everyone' && role.color !== 0)
                .sort((a, b) => b.position - a.position)
                .map(role => ({ name: role.name, color: role.hexColor }));

            for (let i = 0; i < roles.slice(0, maxRolesToShow).length; i++) {
                const role = roles[i];

                ctx.font = '18px "Quicksand"';
                const roleWidth = ctx.measureText(role.name).width + 20;
            
                if (currentX + roleWidth > canvas.width - rightMargin) {
                    currentX = rolesStartX;
                    currentY += lineHeight;
                }
            
                ctx.fillStyle = role.color;
                ctx.beginPath();
                ctx.roundRect(currentX, currentY - 20, roleWidth, 30, [15]);
                ctx.fill();
            
                ctx.fillStyle = '#ffffff';
                ctx.fillText(role.name, currentX + 10, currentY);
            
                currentX += roleWidth + padding;
            }
        
            const attachment = new AttachmentBuilder(canvas.toBuffer(), { name: 'profil-karta-final.png' });
            await interaction.editReply({ files: [attachment] });
        
        } catch (error) {
            console.error("[PROFIL ERROR] Chyba p≈ôi generov√°n√≠ profilov√© karty:", error);
            console.log("--------------------------");
            try {
                if (!interaction.replied) {
                    await interaction.editReply({ content: 'Omlouv√°m se, nepoda≈ôilo se mi vygenerovat profilovou kartu.', ephemeral: true });
                }
            } catch (e) {
                console.error("[PROFIL ERROR] Nepoda≈ôilo se odeslat chybovou zpr√°vu:", e);
            }
        }
    }
});

client.on('guildMemberUpdate', async (oldMember, newMember) => {
    if (newMember.roles.cache.has(ownerRoleId)) return;
});

client.on('guildBanAdd', async (ban) => { 
    ratings[ban.user.id] = 0.0; 
    saveRatings(); 
    await updateRoleStatus(ban.user.id, ban.guild, null); 
    try { 
        const channel = await client.channels.fetch(logChannelId); 
        if (channel) channel.send(`[BAN ALERT] U≈æivatel **${ban.user.tag}** dostal BAN, hodnocen√≠ resetov√°no na **0**!`); 
        console.log(`[BAN] U≈æivatel ${ban.user.tag} zabanov√°n, rating resetov√°n na 0.`);
        console.log("--------------------------");
    } catch (err) { console.error("[BAN ERROR] Chyba p≈ôi logov√°n√≠ banu:", err); console.log("--------------------------"); }
});

client.on('messageCreate', async message => {
        if (message.channel.id === countingChannelId) {
        // Ignorujeme zpr√°vy, kter√© nejsou ƒç√≠sla (nap≈ô. pokud nƒõkdo nap√≠≈°e "lol")
        if (isNaN(parseInt(message.content))) {
            // M≈Ø≈æeme smazat zpr√°vu, aby to neru≈°ilo, ale nen√≠ to nutn√©
            // if (message.deletable) message.delete().catch(() => {});
            return;
        }
    
        const number = parseInt(message.content, 10);
        let errorReason = '';
    
        // Kontrola pravidel
        if (number !== countingState.currentCount + 1) {
            errorReason = `≈°patn√© ƒç√≠slo! Po **${countingState.currentCount}** mƒõlo p≈ôij√≠t **${countingState.currentCount + 1}**.`;
        } else if (message.author.id === countingState.lastUser) {
            errorReason = 'nesm√≠≈° poƒç√≠tat dvakr√°t za sebou!';
        }
    
        // Pokud do≈°lo k chybƒõ
        if (errorReason) {
            // Potrest√°me u≈æivatele
            updateRating(message.author, -2, "D≈Øvod: Pokazil poƒç√≠t√°n√≠");
            await updateRoleStatus(message.author.id, message.guild, message);
            
            // Ozn√°m√≠me chybu a reset
            message.reply(`**≈†PATNƒö!** <@${message.author.id}> pokazil poƒç√≠t√°n√≠, proto≈æe napsal ${errorReason}\n≈òada byla p≈ôeru≈°ena na ƒç√≠sle **${countingState.currentCount}**. Poƒç√≠t√°n√≠ se resetuje od **1**.`);
            message.react('‚ùå').catch(() => {});
        
            // Resetujeme stav
            countingState.currentCount = 0;
            countingState.lastUser = null;
            saveCountingState(countingState);
            return;
        }
    
        // Pokud je v≈°e v po≈ô√°dku (√∫spƒõ≈°n√° cesta)
        countingState.currentCount = number;
        countingState.lastUser = message.author.id;
        saveCountingState(countingState);
    
        // P≈ôid√°me reakce
        message.react('‚úÖ').catch(() => {});
        if (number % 1000 === 0) message.react('üèÜ').catch(() => {});
        else if (number % 100 === 0) message.react('üíØ').catch(() => {});
        else if (number % 50 === 0) message.react('üéâ').catch(() => {});
    }
    if (message.author.bot || !message.guild) return;
    if (otherBotPrefixes.some(p => message.content.startsWith(p)) || message.content.startsWith(prefix)) return;
    if (await checkRepetitiveSpam(message)) return;
    if (message.author.id === process.env.OWNER_ID) return;
    const wasModerated = await moderateMessage(message);
    if (!wasModerated && message.channel.id === activityChannelId) {
        messageCounts[message.author.id] = (messageCounts[message.author.id] || 0) + 1;
        if (messageCounts[message.author.id] >= 10) {
            updateRating(message.author, 0.2, "D≈Øvod: Aktivita");
            await updateRoleStatus(message.author.id, message.guild, message);
            messageCounts[message.author.id] = 0;
        }
        saveMessageCounts();
    }
});

client.on('messageUpdate', async (oldMessage, newMessage) => {
    if (newMessage.partial) { try { await newMessage.fetch(); } catch { return; } }
    if (newMessage.author.bot || !newMessage.guild || oldMessage.content === newMessage.content) return;
    if (newMessage.author.id === process.env.OWNER_ID) return;
    await moderateMessage(newMessage);
});

client.login(process.env.BOT_TOKEN);
